<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Harley&#39;s Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Harley&#39;s Blog</description>
    <generator>Hugo -- 0.144.2</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Harley&#39;s Python IDE</title>
      <link>http://localhost:1313/ide/</link>
      <pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ide/</guid>
      <description>&lt;!-- BEGIN: Python IDE --&gt;

&lt;!-- CodeMirror CSS --&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.css&#34;&gt;
&lt;!-- CodeMirror Hint CSS --&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/addon/hint/show-hint.min.css&#34;&gt;

&lt;!-- CodeMirror JavaScript Libraries --&gt;
&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.js&#34; defer&gt;&lt;/script&gt;
&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/python/python.min.js&#34; defer&gt;&lt;/script&gt;
&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/addon/hint/show-hint.min.js&#34; defer&gt;&lt;/script&gt;

&lt;!-- Pyodide --&gt;
&lt;script src=&#34;https://cdn.jsdelivr.net/pyodide/v0.23.2/full/pyodide.js&#34; defer&gt;&lt;/script&gt;

&lt;!-- Supabase JS --&gt;
&lt;script src=&#34;https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.25.0/dist/umd/supabase.js&#34;&gt;&lt;/script&gt;

&lt;style&gt;
  /* Update to make the code editor fit into a Hugo blog layout */
  .ide-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
  }

  #editor {
    background-color: #f5f5f5;
    font-family: &#39;Fira Mono&#39;, Courier New&#39;, Courier, monospace;
    color: #333;
  }

  #output {
    border: 1px solid #ddd;
    height: 10em;
    margin-top: 10px;
    background-color: #fafafa;
    padding: 10px;
    overflow-y: auto;
    white-space: pre-wrap;
    font-family: &#39;Fira Mono&#39;, &#39;Courier New&#39;, Courier, monospace;
    color: #333;
  }

  button {
    margin-top: 10px;
    padding: 10px 20px;
    border-radius: 5px;
    border: none;
    background-color: #0077cc;
    color: white;
    cursor: pointer;
  }

  button:hover {
    background-color: #005fa3;
  }

  input[type=&#34;text&#34;] {
    padding: 10px;
    margin-top: 10px;
    width: 100%;
    max-width: 300px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }

  .editor-footer {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
  }

  .editor-footer button {
    width: 48%;
  }
&lt;/style&gt;

&lt;div class=&#34;ide-container&#34;&gt;
  &lt;h1&gt;Python IDE&lt;/h1&gt;
  &lt;div id=&#34;editor&#34;&gt;&lt;/div&gt;
  
  &lt;div class=&#34;editor-footer&#34;&gt;
    &lt;button id=&#34;run-btn&#34;&gt;Run Code&lt;/button&gt;
    &lt;button id=&#34;save-btn&#34;&gt;Save Code&lt;/button&gt;
  &lt;/div&gt;
  
  &lt;h2&gt;Output:&lt;/h2&gt;
  &lt;!-- Allow user input in the output window --&gt;
  &lt;div id=&#34;output&#34; contenteditable=&#34;true&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
document.addEventListener(&#34;DOMContentLoaded&#34;, () =&gt; {
  // --- Global variable for Python keywords ---
  let pythonKeywords = [];

  // --- Utility Functions ---
  const outputEl = document.getElementById(&#39;output&#39;);
  function output(text) {
    outputEl.textContent += text + &#34;\n&#34;;
    outputEl.scrollTop = outputEl.scrollHeight; // Auto-scroll
  }
  function clearOutput() {
    outputEl.textContent = &#34;&#34;;
  }

  // Expose output globally for Pyodide&#39;s Python code.
  window.output = output;

  // --- Initialize CodeMirror ---
  const editor = CodeMirror(document.getElementById(&#39;editor&#39;), {
    value: &#39;# Write your Python code here\nprint(&#34;Hello, world!&#34;)&#39;,
    mode: &#39;python&#39;,
    lineNumbers: true,
    extraKeys: {
      &#34;Ctrl-Space&#34;: &#34;autocomplete&#34;
    },
    theme: &#39;default&#39;
  });

  // --- Autocomplete using dynamic Python keywords ---
  CodeMirror.registerHelper(&#34;hint&#34;, &#34;python&#34;, function(editor, options) {
    const cur = editor.getCursor();
    const token = editor.getTokenAt(cur);
    const start = token.start;
    const end = cur.ch;
    const word = token.string.slice(0, end - start);
    // Use the dynamically loaded list if available; else fallback to a minimal list.
    const keywords = pythonKeywords.length ? pythonKeywords : [
      &#34;False&#34;, &#34;None&#34;, &#34;True&#34;, &#34;and&#34;, &#34;as&#34;, &#34;assert&#34;, &#34;async&#34;, &#34;await&#34;,
      &#34;break&#34;, &#34;class&#34;, &#34;continue&#34;, &#34;def&#34;, &#34;del&#34;, &#34;elif&#34;, &#34;else&#34;, &#34;except&#34;,
      &#34;finally&#34;, &#34;for&#34;, &#34;from&#34;, &#34;global&#34;, &#34;if&#34;, &#34;import&#34;, &#34;in&#34;, &#34;is&#34;, &#34;lambda&#34;,
      &#34;nonlocal&#34;, &#34;not&#34;, &#34;or&#34;, &#34;pass&#34;, &#34;raise&#34;, &#34;return&#34;, &#34;try&#34;, &#34;while&#34;, &#34;with&#34;, &#34;yield&#34;
    ];
    const completions = keywords.filter(kw =&gt; kw.startsWith(word));
    return {
      list: completions,
      from: CodeMirror.Pos(cur.line, start),
      to: CodeMirror.Pos(cur.line, end)
    };
  });

  editor.on(&#34;inputRead&#34;, (cm, change) =&gt; {
    if (change.text[0] &amp;&amp; /[\w\.]/.test(change.text[0])) {
      cm.showHint({ hint: CodeMirror.hint.python });
    }
  });

  // --- Load Pyodide and Retrieve Python Keywords ---
  let pyodide = null;
  async function initPyodide() {
    output(&#34;Loading Python interpreter...&#34;);
    try {
      pyodide = await loadPyodide({ indexURL: &#34;https://cdn.jsdelivr.net/pyodide/v0.23.2/full/&#34; });
      output(&#34;Python interpreter loaded.&#34;);
      // Redirect Python&#39;s stdout/stderr to our output window.
      await pyodide.runPythonAsync(`
import sys
import js

class StdoutCatcher:
    def write(self, s):
        if s.strip():
            js.window.output(s)
    def flush(self):
        pass

sys.stdout = sys.stderr = StdoutCatcher()
      `);
      // Get the full list of Python keywords from the built-in module.
      pythonKeywords = await pyodide.runPythonAsync(&#39;import keyword; keyword.kwlist&#39;);
    } catch (err) {
      output(&#34;Error loading Pyodide: &#34; + err);
    }
  }
  initPyodide();

  // --- Button Handlers ---

  // Run Python code.
  document.getElementById(&#39;run-btn&#39;).addEventListener(&#39;click&#39;, async () =&gt; {
    if (!pyodide) {
      output(&#34;Python interpreter not loaded yet.&#34;);
      return;
    }
    clearOutput();
    const code = editor.getValue();
    try {
      const result = await pyodide.runPythonAsync(code);
      if (result !== undefined) {
        output(result.toString());
      }
    } catch (err) {
      output(&#34;Error: &#34; + err);
    }
  });
  
  // Initialize Supabase client outside the DOMContentLoaded event listener
const supabaseClient = supabase.createClient(
  &#39;https://gjjevzqihdzldkxlucjw.supabase.co&#39;,
  &#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdqamV2enFpaGR6bGRreGx1Y2p3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA0MzExMjYsImV4cCI6MjA1NjAwNzEyNn0.6ssXGyJch26dIq0zAcDgJfrnIo6JYi7Uah10A5iEcSM&#39;
);

// Add error handling for clipboard operations
async function saveCode(code) {
  try {
    const { data, error } = await supabaseClient
      .from(&#39;code_snippets&#39;)
      .insert([{ 
        code: code,
        created_at: new Date().toISOString()
      }])
      .select();

    if (error) throw error;

    if (data &amp;&amp; data[0]) {
      const codeId = data[0].id;
      const shareUrl = `${window.location.origin}/ide?id=${codeId}`;
      output(`Code saved successfully! Share using this URL:\n${shareUrl}`);
      
      try {
        await navigator.clipboard.writeText(shareUrl);
        output(&#39;Share URL copied to clipboard!&#39;);
      } catch (clipboardError) {
        output(&#39;Share URL (please copy manually):\n&#39; + shareUrl);
      }
    }
  } catch (error) {
    output(`Error saving code: ${error.message}`);
    throw error; // Re-throw to be handled by the caller
  }}

});
&lt;/script&gt;</description>
    </item>
    <item>
      <title>How to Host a Nostr Relay (for Free*)</title>
      <link>http://localhost:1313/posts/how-to-host-a-nostr-relay-for-free/</link>
      <pubDate>Fri, 21 Feb 2025 12:07:18 +0000</pubDate>
      <guid>http://localhost:1313/posts/how-to-host-a-nostr-relay-for-free/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;I love the nostr protocol and I wanted to host a relay. I was going to do this on my raspberry pi but I knew I wouldn&amp;rsquo;t be able to keep it online 24/7. I didn&amp;rsquo;t want to pay for a VPS to host it for me so I looked for a 100% free way to host it, nostr relays are super fast and light so I wasn&amp;rsquo;t concerned about ram limits or cpu limits!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
