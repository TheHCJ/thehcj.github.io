<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Harley&#39;s Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Harley&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Harley&#39;s Python IDE</title>
      <link>http://localhost:1313/ide/</link>
      <pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ide/</guid>
      <description>&lt;!-- BEGIN: Python IDE --&gt;&#xD;&#xA;&#xD;&#xA;&lt;!-- CodeMirror CSS --&gt;&#xD;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.css&#34;&gt;&#xD;&#xA;&lt;!-- CodeMirror Hint CSS --&gt;&#xD;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/addon/hint/show-hint.min.css&#34;&gt;&#xD;&#xA;&#xD;&#xA;&lt;!-- CodeMirror JavaScript Libraries --&gt;&#xD;&#xA;&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.js&#34; defer&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/python/python.min.js&#34; defer&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/addon/hint/show-hint.min.js&#34; defer&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;!-- Pyodide --&gt;&#xD;&#xA;&lt;script src=&#34;https://cdn.jsdelivr.net/pyodide/v0.23.2/full/pyodide.js&#34; defer&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;!-- Supabase JS --&gt;&#xD;&#xA;&lt;script src=&#34;https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.25.0/dist/umd/supabase.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;style&gt;&#xD;&#xA;  /* Update to make the code editor fit into a Hugo blog layout */&#xD;&#xA;  .ide-container {&#xD;&#xA;    max-width: 800px;&#xD;&#xA;    margin: 0 auto;&#xD;&#xA;    padding: 20px;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  #editor {&#xD;&#xA;    background-color: #f5f5f5;&#xD;&#xA;    font-family: &#39;Fira Mono&#39;, Courier New&#39;, Courier, monospace;&#xD;&#xA;    color: #333;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  #output {&#xD;&#xA;    border: 1px solid #ddd;&#xD;&#xA;    height: 10em;&#xD;&#xA;    margin-top: 10px;&#xD;&#xA;    background-color: #fafafa;&#xD;&#xA;    padding: 10px;&#xD;&#xA;    overflow-y: auto;&#xD;&#xA;    white-space: pre-wrap;&#xD;&#xA;    font-family: &#39;Fira Mono&#39;, &#39;Courier New&#39;, Courier, monospace;&#xD;&#xA;    color: #333;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  button {&#xD;&#xA;    margin-top: 10px;&#xD;&#xA;    padding: 10px 20px;&#xD;&#xA;    border-radius: 5px;&#xD;&#xA;    border: none;&#xD;&#xA;    background-color: #0077cc;&#xD;&#xA;    color: white;&#xD;&#xA;    cursor: pointer;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  button:hover {&#xD;&#xA;    background-color: #005fa3;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  input[type=&#34;text&#34;] {&#xD;&#xA;    padding: 10px;&#xD;&#xA;    margin-top: 10px;&#xD;&#xA;    width: 100%;&#xD;&#xA;    max-width: 300px;&#xD;&#xA;    border: 1px solid #ddd;&#xD;&#xA;    border-radius: 4px;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  .editor-footer {&#xD;&#xA;    display: flex;&#xD;&#xA;    justify-content: space-between;&#xD;&#xA;    margin-top: 20px;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  .editor-footer button {&#xD;&#xA;    width: 48%;&#xD;&#xA;  }&#xD;&#xA;&lt;/style&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;ide-container&#34;&gt;&#xD;&#xA;  &lt;h1&gt;Python IDE&lt;/h1&gt;&#xD;&#xA;  &lt;div id=&#34;editor&#34;&gt;&lt;/div&gt;&#xD;&#xA;  &#xD;&#xA;  &lt;div class=&#34;editor-footer&#34;&gt;&#xD;&#xA;    &lt;button id=&#34;run-btn&#34;&gt;Run Code&lt;/button&gt;&#xD;&#xA;    &lt;button id=&#34;save-btn&#34;&gt;Save Code&lt;/button&gt;&#xD;&#xA;  &lt;/div&gt;&#xD;&#xA;  &#xD;&#xA;  &lt;h2&gt;Output:&lt;/h2&gt;&#xD;&#xA;  &lt;!-- Allow user input in the output window --&gt;&#xD;&#xA;  &lt;div id=&#34;output&#34; contenteditable=&#34;true&#34;&gt;&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;&lt;script&gt;&#xD;&#xA;document.addEventListener(&#34;DOMContentLoaded&#34;, () =&gt; {&#xD;&#xA;  // --- Global variable for Python keywords ---&#xD;&#xA;  let pythonKeywords = [];&#xD;&#xA;&#xD;&#xA;  // --- Utility Functions ---&#xD;&#xA;  const outputEl = document.getElementById(&#39;output&#39;);&#xD;&#xA;  function output(text) {&#xD;&#xA;    outputEl.textContent += text + &#34;\n&#34;;&#xD;&#xA;    outputEl.scrollTop = outputEl.scrollHeight; // Auto-scroll&#xD;&#xA;  }&#xD;&#xA;  function clearOutput() {&#xD;&#xA;    outputEl.textContent = &#34;&#34;;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  // Expose output globally for Pyodide&#39;s Python code.&#xD;&#xA;  window.output = output;&#xD;&#xA;&#xD;&#xA;  // --- Initialize CodeMirror ---&#xD;&#xA;  const editor = CodeMirror(document.getElementById(&#39;editor&#39;), {&#xD;&#xA;    value: &#39;# Write your Python code here\nprint(&#34;Hello, world!&#34;)&#39;,&#xD;&#xA;    mode: &#39;python&#39;,&#xD;&#xA;    lineNumbers: true,&#xD;&#xA;    extraKeys: {&#xD;&#xA;      &#34;Ctrl-Space&#34;: &#34;autocomplete&#34;&#xD;&#xA;    },&#xD;&#xA;    theme: &#39;default&#39;&#xD;&#xA;  });&#xD;&#xA;&#xD;&#xA;  // --- Autocomplete using dynamic Python keywords ---&#xD;&#xA;  CodeMirror.registerHelper(&#34;hint&#34;, &#34;python&#34;, function(editor, options) {&#xD;&#xA;    const cur = editor.getCursor();&#xD;&#xA;    const token = editor.getTokenAt(cur);&#xD;&#xA;    const start = token.start;&#xD;&#xA;    const end = cur.ch;&#xD;&#xA;    const word = token.string.slice(0, end - start);&#xD;&#xA;    // Use the dynamically loaded list if available; else fallback to a minimal list.&#xD;&#xA;    const keywords = pythonKeywords.length ? pythonKeywords : [&#xD;&#xA;      &#34;False&#34;, &#34;None&#34;, &#34;True&#34;, &#34;and&#34;, &#34;as&#34;, &#34;assert&#34;, &#34;async&#34;, &#34;await&#34;,&#xD;&#xA;      &#34;break&#34;, &#34;class&#34;, &#34;continue&#34;, &#34;def&#34;, &#34;del&#34;, &#34;elif&#34;, &#34;else&#34;, &#34;except&#34;,&#xD;&#xA;      &#34;finally&#34;, &#34;for&#34;, &#34;from&#34;, &#34;global&#34;, &#34;if&#34;, &#34;import&#34;, &#34;in&#34;, &#34;is&#34;, &#34;lambda&#34;,&#xD;&#xA;      &#34;nonlocal&#34;, &#34;not&#34;, &#34;or&#34;, &#34;pass&#34;, &#34;raise&#34;, &#34;return&#34;, &#34;try&#34;, &#34;while&#34;, &#34;with&#34;, &#34;yield&#34;&#xD;&#xA;    ];&#xD;&#xA;    const completions = keywords.filter(kw =&gt; kw.startsWith(word));&#xD;&#xA;    return {&#xD;&#xA;      list: completions,&#xD;&#xA;      from: CodeMirror.Pos(cur.line, start),&#xD;&#xA;      to: CodeMirror.Pos(cur.line, end)&#xD;&#xA;    };&#xD;&#xA;  });&#xD;&#xA;&#xD;&#xA;  editor.on(&#34;inputRead&#34;, (cm, change) =&gt; {&#xD;&#xA;    if (change.text[0] &amp;&amp; /[\w\.]/.test(change.text[0])) {&#xD;&#xA;      cm.showHint({ hint: CodeMirror.hint.python });&#xD;&#xA;    }&#xD;&#xA;  });&#xD;&#xA;&#xD;&#xA;  // --- Load Pyodide and Retrieve Python Keywords ---&#xD;&#xA;  let pyodide = null;&#xD;&#xA;  async function initPyodide() {&#xD;&#xA;    output(&#34;Loading Python interpreter...&#34;);&#xD;&#xA;    try {&#xD;&#xA;      pyodide = await loadPyodide({ indexURL: &#34;https://cdn.jsdelivr.net/pyodide/v0.23.2/full/&#34; });&#xD;&#xA;      output(&#34;Python interpreter loaded.&#34;);&#xD;&#xA;      // Redirect Python&#39;s stdout/stderr to our output window.&#xD;&#xA;      await pyodide.runPythonAsync(`&#xD;&#xA;import sys&#xD;&#xA;import js&#xD;&#xA;&#xD;&#xA;class StdoutCatcher:&#xD;&#xA;    def write(self, s):&#xD;&#xA;        if s.strip():&#xD;&#xA;            js.window.output(s)&#xD;&#xA;    def flush(self):&#xD;&#xA;        pass&#xD;&#xA;&#xD;&#xA;sys.stdout = sys.stderr = StdoutCatcher()&#xD;&#xA;      `);&#xD;&#xA;      // Get the full list of Python keywords from the built-in module.&#xD;&#xA;      pythonKeywords = await pyodide.runPythonAsync(&#39;import keyword; keyword.kwlist&#39;);&#xD;&#xA;    } catch (err) {&#xD;&#xA;      output(&#34;Error loading Pyodide: &#34; + err);&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  initPyodide();&#xD;&#xA;&#xD;&#xA;  // --- Button Handlers ---&#xD;&#xA;&#xD;&#xA;  // Run Python code.&#xD;&#xA;  document.getElementById(&#39;run-btn&#39;).addEventListener(&#39;click&#39;, async () =&gt; {&#xD;&#xA;    if (!pyodide) {&#xD;&#xA;      output(&#34;Python interpreter not loaded yet.&#34;);&#xD;&#xA;      return;&#xD;&#xA;    }&#xD;&#xA;    clearOutput();&#xD;&#xA;    const code = editor.getValue();&#xD;&#xA;    try {&#xD;&#xA;      const result = await pyodide.runPythonAsync(code);&#xD;&#xA;      if (result !== undefined) {&#xD;&#xA;        output(result.toString());&#xD;&#xA;      }&#xD;&#xA;    } catch (err) {&#xD;&#xA;      output(&#34;Error: &#34; + err);&#xD;&#xA;    }&#xD;&#xA;  });&#xD;&#xA;  &#xD;&#xA;  // Initialize Supabase client outside the DOMContentLoaded event listener&#xD;&#xA;const supabaseClient = supabase.createClient(&#xD;&#xA;  &#39;https://gjjevzqihdzldkxlucjw.supabase.co&#39;,&#xD;&#xA;  &#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdqamV2enFpaGR6bGRreGx1Y2p3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA0MzExMjYsImV4cCI6MjA1NjAwNzEyNn0.6ssXGyJch26dIq0zAcDgJfrnIo6JYi7Uah10A5iEcSM&#39;&#xD;&#xA;);&#xD;&#xA;&#xD;&#xA;// Add error handling for clipboard operations&#xD;&#xA;async function saveCode(code) {&#xD;&#xA;  try {&#xD;&#xA;    const { data, error } = await supabaseClient&#xD;&#xA;      .from(&#39;code_snippets&#39;)&#xD;&#xA;      .insert([{ &#xD;&#xA;        code: code,&#xD;&#xA;        created_at: new Date().toISOString()&#xD;&#xA;      }])&#xD;&#xA;      .select();&#xD;&#xA;&#xD;&#xA;    if (error) throw error;&#xD;&#xA;&#xD;&#xA;    if (data &amp;&amp; data[0]) {&#xD;&#xA;      const codeId = data[0].id;&#xD;&#xA;      const shareUrl = `${window.location.origin}/ide?id=${codeId}`;&#xD;&#xA;      output(`Code saved successfully! Share using this URL:\n${shareUrl}`);&#xD;&#xA;      &#xD;&#xA;      try {&#xD;&#xA;        await navigator.clipboard.writeText(shareUrl);&#xD;&#xA;        output(&#39;Share URL copied to clipboard!&#39;);&#xD;&#xA;      } catch (clipboardError) {&#xD;&#xA;        output(&#39;Share URL (please copy manually):\n&#39; + shareUrl);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  } catch (error) {&#xD;&#xA;    output(`Error saving code: ${error.message}`);&#xD;&#xA;    throw error; // Re-throw to be handled by the caller&#xD;&#xA;  }}&#xD;&#xA;&#xD;&#xA;});&#xD;&#xA;&lt;/script&gt;</description>
    </item>
    <item>
      <title>How to Host a Nostr Relay (for Free*)</title>
      <link>http://localhost:1313/posts/how-to-host-a-nostr-relay-for-free/</link>
      <pubDate>Fri, 21 Feb 2025 12:07:18 +0000</pubDate>
      <guid>http://localhost:1313/posts/how-to-host-a-nostr-relay-for-free/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;&#xA;&lt;p&gt;I love the nostr protocol and I wanted to host a relay. I was going to do this on my raspberry pi but I knew I wouldn&amp;rsquo;t be able to keep it online 24/7. I didn&amp;rsquo;t want to pay for a VPS to host it for me so I looked for a 100% free way to host it, nostr relays are super fast and light so I wasn&amp;rsquo;t concerned about ram limits or cpu limits!&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/why-i-built-an-online-python-ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/why-i-built-an-online-python-ide/</guid>
      <description></description>
    </item>
  </channel>
</rss>
